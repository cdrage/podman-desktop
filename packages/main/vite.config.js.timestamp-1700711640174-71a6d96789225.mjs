// .electron-vendors.cache.json
var node = "16";

// packages/main/vite.config.js
import { join } from "path";
import { builtinModules } from "module";

// vitest-shared-extensions.config.js
import path from "node:path";
function coverageConfig(packageRoot, packageName) {
  const obj = {
    coverage: {
      all: true,
      clean: true,
      src: [packageRoot],
      exclude: [
        "**/builtin/**",
        "**/cypress/**",
        "**/dist/**",
        "**/node_modules/**",
        "**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
        "**/*.{tsx,cjs,js,d.ts}",
        "**/*-info.ts",
        "**/.{cache,git,idea,output,temp,cdix}/**",
        "**/*{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tailwind,postcss}.config.*"
      ],
      provider: "v8",
      reportsDirectory: path.join(packageRoot, "../../", `test-resources/coverage/${packageName}`),
      reporter: ["lcov", "text"]
    }
  };
  return obj;
}

// packages/main/vite.config.js
var __vite_injected_original_dirname = "/Users/cdrage/syncthing/dev/electron/podman-desktop/packages/main";
var PACKAGE_ROOT = __vite_injected_original_dirname;
var PACKAGE_NAME = "main";
var config = {
  mode: process.env.MODE,
  root: PACKAGE_ROOT,
  envDir: process.cwd(),
  resolve: {
    alias: {
      "/@/": join(PACKAGE_ROOT, "src") + "/"
    }
  },
  build: {
    sourcemap: "inline",
    target: `node${node}`,
    outDir: "dist",
    assetsDir: ".",
    minify: process.env.MODE === "production" ? "esbuild" : false,
    lib: {
      entry: "src/index.ts",
      formats: ["cjs"]
    },
    rollupOptions: {
      external: [
        "electron",
        "chokidar",
        "@kubernetes/client-node",
        "tar-fs",
        "ssh2",
        "analytics-node",
        "electron-devtools-installer",
        ...builtinModules.flatMap((p) => [p, `node:${p}`])
      ],
      output: {
        entryFileNames: "[name].cjs"
      }
    },
    emptyOutDir: true,
    reportCompressedSize: false
  },
  test: {
    ...coverageConfig(PACKAGE_ROOT, PACKAGE_NAME)
  }
};
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
